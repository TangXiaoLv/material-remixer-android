/*
 * Copyright 2016 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

apply plugin: 'com.android.library'
apply plugin: 'com.github.dcendents.android-maven'

group = 'com.github.material-foundation'

/* While this library is no longer used directly (since it makes proguard fail), we keep it mostly
 * for javadoc aggregation (:allJavadoc and :javadocJar). This allows jitpack to automatically
 * generate aggregated javadoc.
 */

android {
  compileSdkVersion rootProject.ext.compileSdkVersion
  buildToolsVersion rootProject.ext.buildToolsVersion

  defaultConfig {
    minSdkVersion rootProject.ext.minSdkVersion
    targetSdkVersion rootProject.ext.targetSdkVersion
    versionCode 1
    versionName "1.0"
    consumerProguardFiles 'proguard-rules.pro'
  }

  compileOptions {
    sourceCompatibility JavaVersion.VERSION_1_7
    targetCompatibility JavaVersion.VERSION_1_7
  }

  lintOptions {
    // Disable gradle dependency check for new versions.
    // Many of these have been chosen to work with Google Tools.
    disable 'GradleDependency'
    textReport true
    textOutput 'stdout'
  }
}

dependencies {
  compile project(':remixer_core')
  compile project(':remixer_storage')
  compile project(':remixer_ui')
}

def javadocProjects = [
  ":remixer_core",
  ":remixer_annotation",
  ":remixer_ui",
  ":remixer_storage"
]

// Make this project depend on complete evaluation of all the javadoc-generating projects.
// This lets us use the ext variables generated in afterEvaluate.
javadocProjects.each {
  evaluationDependsOn(it)
}

// Task that generates javadoc scoped across all subprojects in javadocProjects.
task allJavadoc(type: Javadoc) {
  failOnError false
  options.showAll()
  source javadocProjects.collect { project(it).ext.sourceSetForJavadoc }
  classpath = files(javadocProjects.collect { project(it).ext.classpathForJavadoc })
  destinationDir = file("${buildDir}/docs/javadoc")
}

task sourcesJar(type: Jar) {
  from android.sourceSets.main.java.srcDirs
  classifier = 'sources'
}

task javadocJar(type: Jar, dependsOn: allJavadoc) {
  classifier = 'javadoc'
  destinationDir = file("${buildDir}/docs/")
  from allJavadoc.destinationDir
}

artifacts {
  archives sourcesJar
  archives javadocJar
}

